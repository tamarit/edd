digraph PDG {
15 [shape=ellipse, label="15 .- mergesort:take(2, [o, b, c, a]) = [o, b]"];
111 [shape=ellipse, label="111 .- mergesort:comp(o, p) = true"];
25 [shape=ellipse, label="25 .- mergesort:merge([a], [c], fun mergesort:comp/2) = [a, c]"];
13 [shape=ellipse, label="13 .- mergesort:take(2, [a, c, b, o, i]) = [a, c]"];
8 [shape=ellipse, label="8 .- mergesort:take(4, [w, q, a, p, i, o, b, c, a]) = [w, q, a, p]"];
45 [shape=ellipse, label="45 .- mergesort:comp(a, b) = true"];
94 [shape=ellipse, label="94 .- mergesort:comp(w, e) = false"];
118 [shape=ellipse, label="118 .- mergesort:merge([a, c, b, o, i], [p, a, q, w, e, v], fun mergesort:comp/2) = [a, c, b, o, i, p, a, q, w, e, v]"];
74 [shape=ellipse, label="74 .- mergesort:comp(p, a) = false"];
113 [shape=ellipse, label="113 .- mergesort:merge([], [p, a, q, w, e, v], fun mergesort:comp/2) = [p, a, q, w, e, v]"];
60 [shape=ellipse, label="60 .- mergesort:take(1, [p, a, q]) = [p]"];
95 [shape=ellipse, label="95 .- mergesort:comp(e, v) = true"];
57 [shape=ellipse, label="57 .- mergesort:take(2, [e, w, q, a, p]) = [e, w]"];
101 [shape=ellipse, label="101 .- mergesort:comp(a, w) = true"];
54 [shape=ellipse, label="54 .- mergesort:take(2, [a, q, w, e, v]) = [a, q]"];
89 [shape=ellipse, label="89 .- mergesort:mergesort([v], fun mergesort:comp/2) = [v]" style=filled color="green" fontcolor="white" fillcolor="green"];
21 [shape=ellipse, label="21 .- mergesort:mergesort([a], fun mergesort:comp/2) = [a]" style=filled color="green" fontcolor="white" fillcolor="green"];
107 [shape=ellipse, label="107 .- mergesort:mergesort([p, a, q, w, e, v], fun mergesort:comp/2) = [p, a, q, w, e, v]" style=filled color="red" fontcolor="white" fillcolor="red"];
47 [shape=ellipse, label="47 .- mergesort:comp(b, o) = true"];
24 [shape=ellipse, label="24 .- mergesort:merge([], [c], fun mergesort:comp/2) = [c]"];
40 [shape=ellipse, label="40 .- mergesort:mergesort([o, i], fun mergesort:comp/2) = [o, i]" style=filled color="red" fontcolor="white" fillcolor="red"];
58 [shape=ellipse, label="58 .- mergesort:take(3, [v, e, w, q, a, p]) = [v, e, w]"];
77 [shape=ellipse, label="77 .- mergesort:merge([a], [q], fun mergesort:comp/2) = [a, q]"];
102 [shape=ellipse, label="102 .- mergesort:comp(q, w) = true"];
93 [shape=ellipse, label="93 .- mergesort:mergesort([e, v], fun mergesort:comp/2) = [e, v]" style=filled color="green" fontcolor="white" fillcolor="green"];
110 [shape=ellipse, label="110 .- mergesort:comp(b, p) = true"];
105 [shape=ellipse, label="105 .- mergesort:merge([a, q], [w, e, v], fun mergesort:comp/2) = [a, q, w, e, v]"];
11 [shape=ellipse, label="11 .- mergesort:last(6, [a, c, b, o, i, p, a, q, w, e, v]) = [p, a, q, w, e, v]"];
83 [shape=ellipse, label="83 .- mergesort:last(2, [w, e, v]) = [e, v]"];
63 [shape=ellipse, label="63 .- mergesort:last(2, [p, a, q]) = [a, q]"];
26 [shape=ellipse, label="26 .- mergesort:mergesort([a, c], fun mergesort:comp/2) = [a, c]" style=filled color="green" fontcolor="white" fillcolor="green"];
20 [shape=ellipse, label="20 .- mergesort:last(1, [a, c]) = [c]"];
98 [shape=ellipse, label="98 .- mergesort:merge([w], [e, v], fun mergesort:comp/2) = [w, e, v]"];
44 [shape=ellipse, label="44 .- mergesort:mergesort([b, o, i], fun mergesort:comp/2) = [b, o, i]" style=filled color="red" fontcolor="white" fillcolor="red"];
99 [shape=ellipse, label="99 .- mergesort:mergesort([w, e, v], fun mergesort:comp/2) = [w, e, v]" style=filled color="red" fontcolor="white" fillcolor="red"];
76 [shape=ellipse, label="76 .- mergesort:merge([], [q], fun mergesort:comp/2) = [q]"];
1 [shape=ellipse, label="1 .- mergesort:take(2, [o, i, p, a, q, w, e, v]) = [o, i]"];
104 [shape=ellipse, label="104 .- mergesort:merge([q], [w, e, v], fun mergesort:comp/2) = [q, w, e, v]"];
82 [shape=ellipse, label="82 .- mergesort:take(2, [v, e, w]) = [v, e]"];
41 [shape=ellipse, label="41 .- mergesort:comp(b, o) = true"];
91 [shape=ellipse, label="91 .- mergesort:merge([], [v], fun mergesort:comp/2) = [v]"];
43 [shape=ellipse, label="43 .- mergesort:merge([b], [o, i], fun mergesort:comp/2) = [b, o, i]"];
56 [shape=ellipse, label="56 .- mergesort:take(1, [w, q, a, p]) = [w]"];
115 [shape=ellipse, label="115 .- mergesort:merge([o, i], [p, a, q, w, e, v], fun mergesort:comp/2) = [o, i, p, a, q, w, e, v]"];
14 [shape=ellipse, label="14 .- mergesort:take(1, [b, c, a]) = [b]"];
61 [shape=ellipse, label="61 .- mergesort:take(1, [a, p]) = [a]"];
96 [shape=ellipse, label="96 .- mergesort:merge([], [v], fun mergesort:comp/2) = [v]"];
80 [shape=ellipse, label="80 .- mergesort:take(1, [w, e, v]) = [w]"];
28 [shape=ellipse, label="28 .- mergesort:take(1, [o, b]) = [o]"];
23 [shape=ellipse, label="23 .- mergesort:comp(a, c) = true"];
108 [shape=ellipse, label="108 .- mergesort:comp(a, p) = true"];
112 [shape=ellipse, label="112 .- mergesort:comp(i, p) = true"];
92 [shape=ellipse, label="92 .- mergesort:merge([e], [v], fun mergesort:comp/2) = [e, v]"];
16 [shape=ellipse, label="16 .- mergesort:take(3, [i, o, b, c, a]) = [i, o, b]"];
12 [shape=ellipse, label="12 .- mergesort:take(1, [c, b, o, i]) = [c]"];
39 [shape=ellipse, label="39 .- mergesort:merge([o], [i], fun mergesort:comp/2) = [o, i]"];
34 [shape=ellipse, label="34 .- mergesort:last(1, [o, i]) = [i]"];
68 [shape=ellipse, label="68 .- mergesort:mergesort([a], fun mergesort:comp/2) = [a]" style=filled color="green" fontcolor="white" fillcolor="green"];
78 [shape=ellipse, label="78 .- mergesort:merge([p], [a, q], fun mergesort:comp/2) = [p, a, q]"];
52 [shape=ellipse, label="52 .- mergesort:mergesort([a, c, b, o, i], fun mergesort:comp/2) = [a, c, b, o, i]" style=filled color="red" fontcolor="white" fillcolor="red"];
81 [shape=ellipse, label="81 .- mergesort:take(1, [e, w]) = [e]"];
75 [shape=ellipse, label="75 .- mergesort:comp(a, q) = true"];
64 [shape=ellipse, label="64 .- mergesort:mergesort([p], fun mergesort:comp/2) = [p]" style=filled color="green" fontcolor="white" fillcolor="green"];
109 [shape=ellipse, label="109 .- mergesort:comp(c, p) = true"];
50 [shape=ellipse, label="50 .- mergesort:merge([c], [b, o, i], fun mergesort:comp/2) = [c, b, o, i]"];
67 [shape=ellipse, label="67 .- mergesort:last(1, [a, q]) = [q]"];
36 [shape=ellipse, label="36 .- mergesort:mergesort([i], fun mergesort:comp/2) = [i]" style=filled color="green" fontcolor="white" fillcolor="green"];
7 [shape=ellipse, label="7 .- mergesort:take(3, [q, a, p, i, o, b, c, a]) = [q, a, p]"];
32 [shape=ellipse, label="32 .- mergesort:take(1, [o, i]) = [o]"];
35 [shape=ellipse, label="35 .- mergesort:mergesort([o], fun mergesort:comp/2) = [o]" style=filled color="green" fontcolor="white" fillcolor="green"];
3 [shape=ellipse, label="3 .- mergesort:take(4, [c, b, o, i, p, a, q, w, e, v]) = [c, b, o, i]"];
119 [shape=ellipse, label="119 .- mergesort:mergesort([a, c, b, o, i, p, a, q, w, e, v], fun mergesort:comp/2) = [a, c, b, o, i, p, a, q, w, e, v]"];
55 [shape=ellipse, label="55 .- mergesort:take(3, [p, a, q, w, e, v]) = [p, a, q]"];
49 [shape=ellipse, label="49 .- mergesort:merge([b], [o, i], fun mergesort:comp/2) = [b, o, i]"];
106 [shape=ellipse, label="106 .- mergesort:merge([p, a, q], [w, e, v], fun mergesort:comp/2) = [p, a, q, w, e, v]"];
33 [shape=ellipse, label="33 .- mergesort:take(1, [i, o]) = [i]"];
42 [shape=ellipse, label="42 .- mergesort:merge([], [o, i], fun mergesort:comp/2) = [o, i]"];
72 [shape=ellipse, label="72 .- mergesort:merge([a], [q], fun mergesort:comp/2) = [a, q]"];
70 [shape=ellipse, label="70 .- mergesort:comp(a, q) = true"];
10 [shape=ellipse, label="10 .- mergesort:take(6, [v, e, w, q, a, p, i, o, b, c, a]) = [v, e, w, q, a, p]"];
9 [shape=ellipse, label="9 .- mergesort:take(5, [e, w, q, a, p, i, o, b, c, a]) = [e, w, q, a, p]"];
86 [shape=ellipse, label="86 .- mergesort:take(1, [v, e]) = [v]"];
19 [shape=ellipse, label="19 .- mergesort:take(1, [c, a]) = [c]"];
51 [shape=ellipse, label="51 .- mergesort:merge([a, c], [b, o, i], fun mergesort:comp/2) = [a, c, b, o, i]"];
18 [shape=ellipse, label="18 .- mergesort:take(1, [a, c]) = [a]"];
103 [shape=ellipse, label="103 .- mergesort:merge([], [w, e, v], fun mergesort:comp/2) = [w, e, v]"];
29 [shape=ellipse, label="29 .- mergesort:take(2, [i, o, b]) = [i, o]"];
22 [shape=ellipse, label="22 .- mergesort:mergesort([c], fun mergesort:comp/2) = [c]" style=filled color="green" fontcolor="white" fillcolor="green"];
114 [shape=ellipse, label="114 .- mergesort:merge([i], [p, a, q, w, e, v], fun mergesort:comp/2) = [i, p, a, q, w, e, v]"];
97 [shape=ellipse, label="97 .- mergesort:merge([e], [v], fun mergesort:comp/2) = [e, v]"];
27 [shape=ellipse, label="27 .- mergesort:take(1, [b, o, i]) = [b]"];
73 [shape=ellipse, label="73 .- mergesort:mergesort([a, q], fun mergesort:comp/2) = [a, q]" style=filled color="green" fontcolor="white" fillcolor="green"];
88 [shape=ellipse, label="88 .- mergesort:mergesort([e], fun mergesort:comp/2) = [e]" style=filled color="green" fontcolor="white" fillcolor="green"];
46 [shape=ellipse, label="46 .- mergesort:comp(c, b) = false"];
38 [shape=ellipse, label="38 .- mergesort:merge([i], [], fun mergesort:comp/2) = [i]"];
4 [shape=ellipse, label="4 .- mergesort:take(5, [a, c, b, o, i, p, a, q, w, e, v]) = [a, c, b, o, i]"];
48 [shape=ellipse, label="48 .- mergesort:merge([], [o, i], fun mergesort:comp/2) = [o, i]"];
62 [shape=ellipse, label="62 .- mergesort:take(2, [q, a, p]) = [q, a]"];
71 [shape=ellipse, label="71 .- mergesort:merge([], [q], fun mergesort:comp/2) = [q]"];
17 [shape=ellipse, label="17 .- mergesort:last(3, [a, c, b, o, i]) = [b, o, i]"];
65 [shape=ellipse, label="65 .- mergesort:take(1, [a, q]) = [a]"];
79 [shape=ellipse, label="79 .- mergesort:mergesort([p, a, q], fun mergesort:comp/2) = [p, a, q]" style=filled color="red" fontcolor="white" fillcolor="red"];
0 [shape=ellipse, label="0 .- mergesort:take(1, [i, p, a, q, w, e, v]) = [i]"];
66 [shape=ellipse, label="66 .- mergesort:take(1, [q, a]) = [q]"];
85 [shape=ellipse, label="85 .- mergesort:take(1, [e, v]) = [e]"];
69 [shape=ellipse, label="69 .- mergesort:mergesort([q], fun mergesort:comp/2) = [q]" style=filled color="green" fontcolor="white" fillcolor="green"];
37 [shape=ellipse, label="37 .- mergesort:comp(o, i) = false"];
84 [shape=ellipse, label="84 .- mergesort:mergesort([w], fun mergesort:comp/2) = [w]" style=filled color="green" fontcolor="white" fillcolor="green"];
6 [shape=ellipse, label="6 .- mergesort:take(2, [a, p, i, o, b, c, a]) = [a, p]"];
2 [shape=ellipse, label="2 .- mergesort:take(3, [b, o, i, p, a, q, w, e, v]) = [b, o, i]"];
87 [shape=ellipse, label="87 .- mergesort:last(1, [e, v]) = [v]"];
116 [shape=ellipse, label="116 .- mergesort:merge([b, o, i], [p, a, q, w, e, v], fun mergesort:comp/2) = [b, o, i, p, a, q, w, e, v]"];
5 [shape=ellipse, label="5 .- mergesort:take(1, [p, i, o, b, c, a]) = [p]"];
31 [shape=ellipse, label="31 .- mergesort:mergesort([b], fun mergesort:comp/2) = [b]" style=filled color="green" fontcolor="white" fillcolor="green"];
117 [shape=ellipse, label="117 .- mergesort:merge([c, b, o, i], [p, a, q, w, e, v], fun mergesort:comp/2) = [c, b, o, i, p, a, q, w, e, v]"];
100 [shape=ellipse, label="100 .- mergesort:comp(p, w) = true"];
90 [shape=ellipse, label="90 .- mergesort:comp(e, v) = true"];
30 [shape=ellipse, label="30 .- mergesort:last(2, [b, o, i]) = [o, i]"];
59 [shape=ellipse, label="59 .- mergesort:last(3, [p, a, q, w, e, v]) = [w, e, v]"];
53 [shape=ellipse, label="53 .- mergesort:take(1, [q, w, e, v]) = [q]"];
15 -> 14 [color=black, penwidth=3];
25 -> 24 [color=black, penwidth=3];
25 -> 23 [color=black, penwidth=3];
13 -> 12 [color=black, penwidth=3];
8 -> 7 [color=black, penwidth=3];
118 -> 117 [color=black, penwidth=3];
118 -> 108 [color=black, penwidth=3];
57 -> 56 [color=black, penwidth=3];
54 -> 53 [color=black, penwidth=3];
107 -> 106 [color=black, penwidth=3];
107 -> 99 [color=black, penwidth=3];
107 -> 79 [color=black, penwidth=3];
107 -> 59 [color=black, penwidth=3];
107 -> 55 [color=black, penwidth=3];
40 -> 39 [color=black, penwidth=3];
40 -> 36 [color=black, penwidth=3];
40 -> 35 [color=black, penwidth=3];
40 -> 34 [color=black, penwidth=3];
40 -> 32 [color=black, penwidth=3];
58 -> 57 [color=black, penwidth=3];
77 -> 76 [color=black, penwidth=3];
77 -> 75 [color=black, penwidth=3];
93 -> 92 [color=black, penwidth=3];
93 -> 89 [color=black, penwidth=3];
93 -> 88 [color=black, penwidth=3];
93 -> 87 [color=black, penwidth=3];
93 -> 85 [color=black, penwidth=3];
105 -> 104 [color=black, penwidth=3];
105 -> 101 [color=black, penwidth=3];
11 -> 10 [color=black, penwidth=3];
83 -> 82 [color=black, penwidth=3];
63 -> 62 [color=black, penwidth=3];
26 -> 25 [color=black, penwidth=3];
26 -> 22 [color=black, penwidth=3];
26 -> 21 [color=black, penwidth=3];
26 -> 20 [color=black, penwidth=3];
26 -> 18 [color=black, penwidth=3];
20 -> 19 [color=black, penwidth=3];
98 -> 97 [color=black, penwidth=3];
98 -> 94 [color=black, penwidth=3];
44 -> 43 [color=black, penwidth=3];
44 -> 40 [color=black, penwidth=3];
44 -> 31 [color=black, penwidth=3];
44 -> 30 [color=black, penwidth=3];
44 -> 27 [color=black, penwidth=3];
99 -> 98 [color=black, penwidth=3];
99 -> 93 [color=black, penwidth=3];
99 -> 84 [color=black, penwidth=3];
99 -> 83 [color=black, penwidth=3];
99 -> 80 [color=black, penwidth=3];
1 -> 0 [color=black, penwidth=3];
104 -> 103 [color=black, penwidth=3];
104 -> 102 [color=black, penwidth=3];
82 -> 81 [color=black, penwidth=3];
43 -> 42 [color=black, penwidth=3];
43 -> 41 [color=black, penwidth=3];
115 -> 114 [color=black, penwidth=3];
115 -> 111 [color=black, penwidth=3];
92 -> 91 [color=black, penwidth=3];
92 -> 90 [color=black, penwidth=3];
16 -> 15 [color=black, penwidth=3];
39 -> 38 [color=black, penwidth=3];
39 -> 37 [color=black, penwidth=3];
34 -> 33 [color=black, penwidth=3];
78 -> 77 [color=black, penwidth=3];
78 -> 74 [color=black, penwidth=3];
52 -> 51 [color=black, penwidth=3];
52 -> 44 [color=black, penwidth=3];
52 -> 26 [color=black, penwidth=3];
52 -> 17 [color=black, penwidth=3];
52 -> 13 [color=black, penwidth=3];
50 -> 49 [color=black, penwidth=3];
50 -> 46 [color=black, penwidth=3];
67 -> 66 [color=black, penwidth=3];
7 -> 6 [color=black, penwidth=3];
3 -> 2 [color=black, penwidth=3];
119 -> 118 [color=black, penwidth=3];
119 -> 107 [color=black, penwidth=3];
119 -> 52 [color=black, penwidth=3];
119 -> 11 [color=black, penwidth=3];
119 -> 4 [color=black, penwidth=3];
55 -> 54 [color=black, penwidth=3];
49 -> 48 [color=black, penwidth=3];
49 -> 47 [color=black, penwidth=3];
106 -> 105 [color=black, penwidth=3];
106 -> 100 [color=black, penwidth=3];
72 -> 71 [color=black, penwidth=3];
72 -> 70 [color=black, penwidth=3];
10 -> 9 [color=black, penwidth=3];
9 -> 8 [color=black, penwidth=3];
51 -> 50 [color=black, penwidth=3];
51 -> 45 [color=black, penwidth=3];
29 -> 28 [color=black, penwidth=3];
114 -> 113 [color=black, penwidth=3];
114 -> 112 [color=black, penwidth=3];
97 -> 96 [color=black, penwidth=3];
97 -> 95 [color=black, penwidth=3];
73 -> 72 [color=black, penwidth=3];
73 -> 69 [color=black, penwidth=3];
73 -> 68 [color=black, penwidth=3];
73 -> 67 [color=black, penwidth=3];
73 -> 65 [color=black, penwidth=3];
4 -> 3 [color=black, penwidth=3];
62 -> 61 [color=black, penwidth=3];
17 -> 16 [color=black, penwidth=3];
79 -> 78 [color=black, penwidth=3];
79 -> 73 [color=black, penwidth=3];
79 -> 64 [color=black, penwidth=3];
79 -> 63 [color=black, penwidth=3];
79 -> 60 [color=black, penwidth=3];
6 -> 5 [color=black, penwidth=3];
2 -> 1 [color=black, penwidth=3];
87 -> 86 [color=black, penwidth=3];
116 -> 115 [color=black, penwidth=3];
116 -> 110 [color=black, penwidth=3];
117 -> 116 [color=black, penwidth=3];
117 -> 109 [color=black, penwidth=3];
30 -> 29 [color=black, penwidth=3];
59 -> 58 [color=black, penwidth=3];
}