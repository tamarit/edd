> edd:dd("ackermann:main([3,4])").
Total number of tree nodes: 91
Tree size:
        9345 words
        74760 bytes
Please, insert a list of trusted functions [m1:f1/a1, m2:f2/a2 ...]:
ackerman:ack(3, 3) = 4? [y/n/t/d/i/s/u/a]: n
ackerman:ack(3, 2) = 3? [y/n/t/d/i/s/u/a]: n
ackerman:ack(2, 2) = 3? [y/n/t/d/i/s/u/a]: n
ackerman:ack(2, 1) = 2? [y/n/t/d/i/s/u/a]: n
ackerman:ack(1, 1) = 2? [y/n/t/d/i/s/u/a]: n
ackerman:ack(1, 0) = 1? [y/n/t/d/i/s/u/a]: n
ackerman:ack(0, 0) = 1? [y/n/t/d/i/s/u/a]: y
Call to a function that contains an error:
ackermann:ack(1, 0) = 1
Please, revise the second clause:
ack(M, 0) -> ack(M - 1, 0).


DIVIDE & QUERY: 7
=================
>edd:dd( "ackermann:main([3,4])", tree ).
Please, insert a list of trusted functions [m1:f1/a1, m2:f2/a2 ...]:
ackerman:ack(3, 3) = 4? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackerman:ack(3, 2) = 3? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackermann:ack(2, 2) = 3? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackermann:ack(2, 1) = 2? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackermann:ack(1, 1) = 2? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackermann:ack(1, 0) = 1? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackermann:ack(0, 0) = 1? [y/n/t/d/i/s/u/a]: y

Complexity: 1 (base)
Total complexity: 7
Max complexity: 1

Call to a function that contains an error:
ackermann:ack(1, 0) = 1
Please, revise the second clause:
ack(M, 0) -> ack(M - 1, 0).

TOP DOWN: 8
===========
> edd:dd( "ackerman:main([3,4])", tree, top_down ).
Please, insert a list of trusted functions [m1:f1/a1, m2:f2/a2 ...]:
The format is not correct
ackermann:ack(3, 4) = 5? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackermann:ack(3, 3) = 4? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackermann:ack(3, 2) = 3? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackermann:ack(2, 2) = 3? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackermann:ack(2, 1) = 2? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackermann:ack(1, 1) = 2? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackermann:ack(1, 0) = 1? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

ackermann:ack(0, 0) = 1? [y/n/t/d/i/s/u/a]: y

Complexity: 1 (base)
Total complexity: 8
Max complexity: 1

Call to a function that contains an error:
ackermann:ack(1, 0) = 1
Please, revise the second clause:
ack(M, 0) -> ack(M - 1, 0).

